void subsetsUtil(vector<int>& A, vector<vector<int> >& res,vector<int>& subset, int index)
{
	res.push_back(subset);
		for (int i = index; i < A.size(); i++) {
        subset.push_back(A[i]);
        subsetsUtil(A, res, subset, i + 1);
        subset.pop_back();
	}

	return;
}

//subset of array
vector<vector<int>> array_subsets(vector<int> arr) {

	vector<int> subset;
	vector<vector<int> > res;
	int index = 0;
	subsetsUtil(arr, res, subset, index);
	return res;
}
int main() {
	/*while (true) {
		int x = 0;
		cout << "Enter positiion or 1 to exit : ";
	    cin >> x;
		if (x == 0)
			return 0;
		cout << endl<< fibinnaci(x)<<endl;
	}*/
	// find the subsets of below vector.
	vector<int> array = { 2, 1, 3, 5, 4 };

	
	/*vector<vector<int> > res = array_subsets(array);

	for (int i = 0; i < res.size(); i++) {
		sort(res[i].begin(), res[i].end());
		for (int j = 0; j < res[i].size(); j++)
			cout << res[i][j] << " ";
		cout << endl;
	}*/



	//
	cout << countSubarray(array.size(),array,2);

	return 0;

}