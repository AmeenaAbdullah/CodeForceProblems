#include <iostream>
#include <unordered_set>
#include <stack>

using namespace std;

//struct Node {
//    int data;
//    Node* next;
//    Node* bottom;
//};
//
//class LinkedList {
//private:
//    Node* head;
//
//public:
//    LinkedList() {
//        head = nullptr;
//    }
//
//    ~LinkedList() {
//        Node* current = head;
//        while (current != nullptr) {
//            Node* next = current->next;
//            delete current;
//            current = next;
//        }
//        head = nullptr;
//    }
//
//    void insertAtBeginning(int value) {
//        Node* newNode = new Node;
//        newNode->data = value;
//        newNode->next = head;
//        head = newNode;
//    }
//
//    void insertAtEnd(int value) {
//        Node* newNode = new Node;
//        newNode->data = value;
//        newNode->next = nullptr;
//        if (head == nullptr) {
//            head = newNode;
//        }
//        else {
//            Node* current = head;
//            while (current->next != nullptr) {
//                current = current->next;
//            }
//            current->next = newNode;
//        }
//    }
//
//    void deleteFromBeginning() {
//        if (head != nullptr) {
//            Node* temp = head;
//            head = head->next;
//            delete temp;
//        }
//    }
//
//    void deleteFromEnd() {
//        if (head != nullptr) {
//            if (head->next == nullptr) {
//                delete head;
//                head = nullptr;
//            }
//            else {
//                Node* current = head;
//                while (current->next->next != nullptr) {
//                    current = current->next;
//                }
//                delete current->next;
//                current->next = nullptr;
//            }
//        }
//    }
//    Node* findnode(int n) {
//        for (Node* curr = head; curr != NULL; curr = curr->next)
//        {
//            if (curr->data == n)
//                return curr;
//        }
//    }
//    void deletenode(int n) {
//        Node* node = findnode(n);
//        Node* temp;
//        if (node->next == nullptr)
//        {
//          
//            cout << "It is last node its require head\n";
//        }
//        else
//        {
//            node->data = node->next->data;
//            temp = node->next;
//            node->next = temp->next;
//            delete temp;
//           
//        }
//       
//    }
//    int length(Node* head)
//    {
//        int n = 0;
//        for (Node* curr = head; curr != NULL; curr = curr->next)
//            n++;
//        return n;
//    }
//
//
//    void print() {
//        Node* current = head;
//        while (current != nullptr) {
//            cout << current->data << " ";
//            current = current->next;
//        }
//        cout << endl;
//    }
//    Node* getHead() {
//        return head;
//    }
//    void reverse() {
//        Node* prev = nullptr;
//        Node* current = head;
//        Node* next = nullptr;
//        while (current != nullptr) {
//            next = current->next;
//            current->next = prev;
//            prev = current;
//            current = next;
//        }
//        head = prev;
//    }
//    Node* reverse(Node* head) {
//        Node* prev = nullptr;
//        Node* temp;
//        while (head != nullptr) {
//            temp = head->next;
//            head->next = prev;
//            prev = head;
//            head = temp;
//        }
//        return prev;
//
//    }
//    void reverseLastNodes(Node*ptr,int n) {
//        
//        int lenght = length(ptr);
//        Node* curr = ptr;
//        for (int i = 0; i < lenght - n - 1;i++) {
//            curr = curr->next;
//        }
//        curr->next = reverse(curr->next);
//    }
//    void firstRepetition() {
//        for (Node* curr = head; curr->next != NULL; curr = curr->next) {
//            if (curr->data == curr->next->data)
//            {
//                cout << "first Repetition is: " << curr->data << endl;
//                return;
//
//            }
//        }
//        cout << "Not found"<<  endl;
//    }
//
//    //remove loop in the linklist
//    void removeLoop(Node* head)
//    {
//        unordered_set<Node*> hash;
//        Node* curr = head;
//        while (curr != NULL) {
//
//            if (hash.find(curr->next) != hash.end())
//            {
//                curr->next = NULL;
//            }
//            hash.insert(curr);
//            curr = curr->next;
//
//        }
//    }
//    bool isPalindrome(Node* head)
//    {
//        //Your code here
//        Node* slow = head;
//        stack<int> s;
//        while (slow != NULL) {
//            s.push(slow->data);
//            slow = slow->next;
//        }
//        slow = head;
//        while (slow != NULL) {
//            int value = s.top();
//            s.pop();
//            if (value != slow->data)
//                return false;
//
//            slow = slow->next;
//
//        }
//        return true;
//    }
//    void removeDuplicates(Node* head)
//    {
//        // your code goes here
//        Node* curr = head;
//        while (curr->next!= NULL) {
//            if (curr->data == curr->next->data) {
//                if (curr->next->next != NULL)
//                    curr->next = curr->next->next;
//                else
//                {
//                    curr->next = NULL;
//                  
//                }
//            }
//            else {
//                curr = curr->next;
//            }
//           
//        }
//    }
//    Node* rotate(Node* head, int k)
//    {
//        // Your code here
//        Node* temp = head;
//        Node* temp2;
//        int n = 0;
//        while (temp->next != NULL) {
//            n++;
//            temp = temp->next;
//            if (n == k)
//                temp2 = temp;
//
//        }
//
//        Node* curr = head;
//        if (curr->next == NULL)
//            return head;
//        do {
//            temp->next = curr;
//            temp = curr;
//            curr = curr->next;
//
//        } while (curr->next != temp2);
//        curr->next = NULL;
//
//        return temp2;
//    }
//    Node* rotate(Node* head, int k)
//    {
//        if (k == 0)
//            return head;
//        Node* current = head;
//
//        int count = 1;
//        while (count < k && current != NULL) {
//            current = current->next;
//            count++;
//        }
//
//        if (current == NULL)
//            return head;
//
//        Node* kthNode = current;
//        while (current->next != NULL)
//            current = current->next;
//        current->next = head;
//
//        head = kthNode->next;
//
//        kthNode->next = NULL;
//
//
//        return head;
//    }
//    Node* merge(Node* a, Node* b) {
//        Node* temp;
//        Node* res = temp;
//
//        while (a != NULL && b != NULL) {
//            if (a->data < b->data) {
//                temp->bottom = a;
//                temp = temp->bottom;
//                a = a->bottom;
//            }
//            else {
//                temp->bottom = b;
//                temp = temp->bottom;
//                b = b->bottom;
//            }
//        }
//
//        if (a) temp->bottom = a;
//        else temp->bottom = b;
//
//        return res->bottom;
//    }
//
//
//    Node* flatten(Node* root)
//    {
//        // Your code here
//
//        if (root == NULL || root->next == NULL)
//            return root;
//
//        root->next = flatten(root->next);
//
//        root = merge(root, root->next);
//        return root;
//
//    }
//};
int maxLength(string str) {
    int n = str.size();

    int maxi = 0;

    vector<int> dp(n, 0);

    stack<int> st;

    for (int i = 0; i < n; i++)
    {
        if (str[i] == '(')
        {
            st.push(i);
        }
        else if (str[i] == ')')
        {
            if (st.empty())
            {
                dp[i] = 0;
            }
            else
            {
                int idx = st.top();
                st.pop();

                maxi = maxi + 2;
            }
        }

        // update maxi

       
    }

    return maxi;

}
void product(int k) {

}

int main() {
   // LinkedList list;
   // list.insertAtBeginning(10);
   // list.insertAtEnd(20);
   // list.insertAtBeginning(5);
   // list.insertAtBeginning(5);
   // list.insertAtBeginning(50);
   // list.insertAtBeginning(85);
   // list.insertAtBeginning(85);
   // list.insertAtEnd(20); 
   // list.insertAtEnd(20);
   // list.insertAtEnd(20);
   // list.insertAtEnd(20);
   // list.insertAtEnd(20); 
   // list.insertAtEnd(20);

   ///* list.deleteFromBeginning();
   // list.deleteFromEnd();*/
   // list.print();


   // list.reverseLastNodes(list.getHead(),4);
   // list.deletenode(20);
   // list.print();
   // list.firstRepetition();


    /*list.removeDuplicates(list.getHead());
    list.print();*/


    cout << maxLength(")(((())(()()(()))))()(()))(((()))((()()(((()())()()())()))((()()()((()()()())()()))))(()())))())))(()))((()()))())((()()(((((((((()(()()(())()((()))()()()()(((()))()()))))()((((())(()(()()((((())(()())((()))))))((())()()()())(())()))((())())(())))()((())()))))()))))()))))(())(((()())(((()((())()))))))))(()()()))(()))()(()((((()(()(()())))))()())))))(()()))())))((())())((())())()(((()(())()))))()))())))))()((()))())()))(()((((())())()(()))()))()))))(((())()(()((()()(()(()((((())(((())(()()))(())())((((()()(())))())())))))))))())()()(((()))()))()(()(()(())))))())((((()((()((((()()(()())())(((())((((())((())))((((()(((((())))(()))(()))))()))((()))(((()((())))((()(()((()()()()))()())()(())((()()()))()(((((()(())()(())))(((((()(())(()((()()(()(())())()))(()))())()))(())()()())()))())))())(()())))(((((()()(((((())()))))())()((())))(())((())()((((())(()()))((()((()()((()()))(())()(()(()(())((())()())(()())()))))()(())))(())()()(()(())()((()(((())()))(())()((((())((()))()()))))()(())()((()()(()()(((()())()))))(()(()())(()((()()())())((((((())))()()))((())()))))()()))(((()(()(((()()(((()(((()))(()()()((()()))()))((()()()(((())(()(())())())())((()(()((())(()))(()()(())))()())))(())()((())()(())(((()((())))()()()(((()(((())))((()(()(()(((())))((()()(()(()(((((()()()()())(((())()(((())()()(((()()))))()()()))))((()()(((())((()((((())()(()((())))))(()()))(()((())()(()()()()(()())))())())(((((())())))()((()))))()((()((())))(())())((()())(((()()())((((()((((()()(((()((()))))))))()()(()))())()()())))(()(()(((()()())(())(((()()(()()(((()))((()))))(()()((())(())))(())()())))))()()))()())))())()())))(()((((()())()(())()))))()()(())))((())(()))(()((((()(((((())()()()(((()((())(()))()(()()(()()((())(((()))((()()()))()(()()((())()())(()()(())(((()))())))(((()((((()))))((()))(()(()(()())(())((()))))))(()()())))))((()()(())))())())(()()))()(((())))(())())(((((())())())))((())(()))))(((()))(()))))))))())))))())(((()))))))(())()))))())(()()()))(()(()(()))))))))((((())))(()((()()((())(())(()()()(())()()))(())((()(())))(())()))(())(())(((((())())())()())))()()((()(())((())(()(()())))()))(()))()(()())))))()())((((())))(()()((())())())())()))(((((((())(()(()((()())())((((()()()))))(()()(())))(())((()))()(())()))(()()())(()))))(((((())(()(()(())(())()())()((())))()))))(())))(((((())()()()())))()))))(())((()))(()((()())))))))())()(((()))()())()()))(()((()())(((()))()()))))()()((()))(()((()))(())))())()()())))()))(()))(()()(()(((()))((((((((((())(()()())))()()(((())))((())((((())))())()(())((())(()))((())))())()())))))))()(()))))((()))))())()(()(()())))())()))((((((((((()()())))()()))))))))))(((((()))))(()(()))())))()(()((()()())))))(())()(()(())))()))(()))))))(())))(())))())())))))))())(()()(())((((())())))((((((()((())))(((())())()(()((())()())())()))()(()())(()))()()))()()())())()((())))))(()())()(()()))()(()((())))))()))(()()))()))))())))(()(())()())(()())(())())(((((())()(()))()))()()()(())((())((((((())()))(())(()))(()()(()()((())()))((())()((()()(())(())()())((()))(()()))(()))))))(()())()())))))(())()(()(()(()()())()(((((()((()()))(()))))))()(()))((((((()))())()())))))))(((((((()))((())(())))())())(()()()()())())(()((((((()(()((()())))))())(())))((()))((()((()()())())()))(())((((()()(()))()(((((((())()())()((()()))())(()()))(())()((()(()))()(()(()()((((()))))()()((()(())(()()(((()((()((((()((()))())()(()((()((())))()()()()(((()(()((()))()()(()))()(((())))()))()()(())(((()())(())())())(())())))))()()())))(()()(())()))()(())())))())(()))))()(()())(((())))))))((((()(()(((())((()()())))()(())((()()(())(()((()()))(()()))(()))()))(()()(())()((())))))()()()))))))))())()))()()))))))()(((()))))))(((()(())())()))))())()(()(()()((()()))(()(())()))))())))()(()))(((((())()(())()()())((()()(()()((()))()))()(())(()()()()))(()()((((()(()((()(((())((())((()((()))(()()))()))((((((()(())))((((((()())))()))(((()))()(()(()((()))())())())((()))()((()(((())()(((()(())((())(())(((((()())(())()((()((()))(((())((())((((())(()()(())())((()(())())(())(((())((()(())()(((()(())()(()))((()()()))())()()())))))()))()))(())()(())(((()((((((())))(()(((()()))))((()()))((()(()((()((())())()))()()(()()())))((()(((((()()))))()((((()((()(((()()(((())))))())(((()(())))((()))((())))())(()(()()))())))((()()(((((()))))((()())()))))))())()()()(())(()))((()())()((((((()())))(((())(()()(((((()))((())(()((((())())))()()))(())((((())))))((((()(((()())(())())((()((()((())()))(())()))()(()())))((((()(())(()())(((()))(())())))((())))))((())((()(((())()))))))(()()))))(()(()((()))(((((()(())())(()(((((()()())))(()()(((((()((()()(((()())(()(())(()()()())))(((())(())))((())())))()((()(()))((())))()()()()(()()((())((((()()((((())))()((((()()())()((()()()()(()(()()))(())))()(())))(())()))())))())()(()()()())()))(())()())()()((((((()()))((((()())((()((())(()()()(((()()())))((()))()())))()(((()))()()(()))(((((()()(()()))(((()(())()(()()()()()))(()))()()(()))()((()(())(()(()())())))((()(())((((())()((())(((((((()()(()()))()(()()((()()(((()))()())()(()())((()))(()((())))(((()(((())))()()(()(()()(())()()()(())))()))(())(())(()))))))()()()))()(((())((()((()()(()(()(()(()())))(()))((()()())))(((())(()())())(((()))(((()))))((()()(())()()()()(()))(()(()((()(()()(())(()))))(((())())))()()())))(()()()(()((())((((()())))())()())())((((())(()))(()())()()())))(((()))((()())()((()(()(())()()()()((()()))))()))()(()())((()()()())))()(()())(()))()(((())())))())(((())((()())()(()))())))((()(())(()(())(()()()(())))))((())(()()()))))((()()))())(((())()))()())())()))()((())()()(()))))))(()(()())(()))(()))((())()))()))))(())()))))()(()()()())()))())()()))()))()((()()()())(((())()(()(())())))((())((()((()))))((()()(((((((((()((()))()(()))((()))((()))()()((())(())())()))((((()())()((()))(()()((((()((())))()(())(())())((()()()((())))())))()))(())())))()((()))()((()(()(()(())()(()(()((((()()))(())((()()(())()()(()()()(((()))()))(()((()(()(()())))()((()(())))(((())((()(((()(()()))(())()(()))(((())((()))))()(())(()()()(())()())((()())()((()(((()((((())(())))(()(()())))()(())(()))()))))))(((())(((((()()((())()()(()())((())((()))(())()))))(((()((((()))))(((((())(()(())()(((()()())(()())))(()))()))))))(())(())()()))())()(()(()(()((())()())(()))()(())((((()())))(()))(()((()((())))))))(()(()(()))))(()))())(()())))))(())((()(()((()()(()())(()(())((()))((()((()(()()((((())())()((((()))()()()(())(()()(()(())()((()()()))))))()))()(()()())())(()()))))())()()()((((()()(()()()))))())))((()())(())()((()()))))())))()()())()()(())(()(((())))()((()()))))()((()())))()())()))((()())(())))()()(())(()(())))(())((((()(()())))))))(())()(()))))()()((())))))())())())))(((((())(())(()((((()))()))())()()())()(()))()()())())(()()))()())))()()(()))((()(()()((((((()(()(((()))))()))()()))))()()()))()())(()(())())))(((((()()((((())(())))(()))())()()((()))((()(()))))))((((()))()()()(((()))(()(())(()()())())()(()))(())()(()))()))(())())))()))))))()))((((()))))(((()(()))())()(((((())())())((())))()(())(((()()()))(()())((()(()(()))())))()()(()()(((()))()((())(())())()))))))()(())()))((()((())))))()())())))(()()((())))))())())))(()()))))()(()))()())()(()())()())())())))(((())(()())(())(((()((((()()()()(()()())()(((()))))(())()(((()))())))))()()()(()()())(()))))())))))))))(())(()()))()()))())))))((((((()()()(())()(()(()))))))((()((()()))()(())(((()((((((())(()))))))()(())())))()((())(()())))))()))()(())())()))())(())))))()))(())((((())())()((())()(()()()))()))((()(((((()))((()()()()(()()(())))((()((((()))())(())(())))(((((()))((())())(()())((()(()()()))()()()()())()))())(((()())(()()))()(((()))))))())))())))))(((((()(()))))))))))())())()))))()()()())(())(())()()())(())(())(())((((())((((())))())))()()))())(())(()()))(()()())(())())))())(()()()(()((())((())))(()(()((()((((((()()(()))(())((()()))(((())()()())((()((())((()))()))(()))()((((()()))))()()())(())()(()())()()((()))))()(((())))))))()())))(((()(()(((()())(()(())())()(()))(((()()(()))))(())(())(((()(()()))())))())())))))(((())(())))(()))())(()()(()(())((((()(()()))))(()()()((()())()((()))())())()))))))()))()(()((()))))()())()())())())()())))(()())()()())()(())(()((()(()()(())()(((((())((()))()))()(()((()(((())))())((()((()((((())((()()()((((()(()(()))(()))(()())))()()((())())((()((()()))((()(())()))((((((())))()))()))(((()()())(((()))())()())())(()))()()))()()())()((()))))(())))))))())(()(((((()))())((())())))))())(()))(()())((()()())())())()(()(()(())(((())))()()))))()(())))((()((()))))))((()(((())((((())(((()))())())(()))()(()()(())()()((((()()(())()(()()(((())()(()))((()())))()((()()))(()()()(()((()(((()((()))()))))())())((((())(((((())))(()(())(()))))((())())()()(()))(()())((((()((()))())(())()(()(((()((()())((()())))((((()(((()))))((())()()())())(())(()))))())(())))())))())((())((()()(())))(()(())()())()()((()))()))())((()()))(())()()()((()(((()(()()()(()((()(())()((())()()((()))(()))((()(()(((())(())((()()((())()()()()(()))(())))((()()))(())()(((())(()((()())((((((((((()()))()()))())(())(()))((()((()())()(()(()(())(())))()()))(((())(()(()))(()((())()))()(()))())((())))((()(())()()))()())())()((((()))((())())(()((())())()(()))())()((((()(((((())((((()))()()(()(())((((((())))((()))()()))))((()((())((()()))((((()))(()(()))()()))((()(()((())(()((())))))))())()()()()))()))(())()(()((((()()(((((()())())((((()()()(((()()))))(((()((((()))))(())()()()(()(())))((())(((()((())())()(())(()))))((()))(()()())())((())((()(()(()(()((()(()(())(()))))(()()())()()))(()())))))(())(()))))())(())()))()())()))())(((");
    return 0;
}
